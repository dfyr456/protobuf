{"ast":null,"code":"import JSBI from \"jsbi\";\nimport { bufferLeToBeHex, bufferToPrettyHex } from \"./hexUtils\";\nimport { interpretAsSignedType } from \"./varintUtils\";\nexport function decodeFixed32(value) {\n  const floatValue = value.readFloatLE(0);\n  const intValue = value.readInt32LE(0);\n  const uintValue = value.readUInt32LE(0);\n  const result = [];\n  result.push({\n    type: \"Int\",\n    value: intValue\n  });\n  if (intValue !== uintValue) {\n    result.push({\n      type: \"Unsigned Int\",\n      value: uintValue\n    });\n  }\n  result.push({\n    type: \"Float\",\n    value: floatValue\n  });\n  return result;\n}\nexport function decodeFixed64(value) {\n  const floatValue = value.readDoubleLE(0);\n  const uintValue = JSBI.BigInt(\"0x\" + bufferLeToBeHex(value));\n  const intValue = twoComplements(uintValue);\n  const result = [];\n  result.push({\n    type: \"Int\",\n    value: intValue.toString()\n  });\n  return result;\n}\n\n// this is also related\n\nexport function decodeVarintParts(value) {\n  const result = [];\n  const intVal = JSBI.BigInt(value);\n  result.push({\n    value: intVal.toString()\n  });\n  return result;\n}\nexport function decodeStringOrBytes(value) {\n  if (!value.length) {\n    return {\n      type: \"string|bytes\",\n      value: \"\"\n    };\n  }\n  const td = new TextDecoder(\"utf-8\", {\n    fatal: true\n  });\n  try {\n    return {\n      type: \"string\",\n      value: td.decode(value)\n    };\n  } catch (e) {\n    return {\n      type: \"bytes\",\n      value: bufferToPrettyHex(value)\n    };\n  }\n}\nconst maxLong = JSBI.BigInt(\"0x7fffffffffffffff\");\nconst longForComplement = JSBI.BigInt(\"0x10000000000000000\");\nfunction twoComplements(uintValue) {\n  if (JSBI.greaterThan(uintValue, maxLong)) {\n    return JSBI.subtract(uintValue, longForComplement);\n  } else {\n    return uintValue;\n  }\n}","map":{"version":3,"names":["JSBI","bufferLeToBeHex","bufferToPrettyHex","interpretAsSignedType","decodeFixed32","value","floatValue","readFloatLE","intValue","readInt32LE","uintValue","readUInt32LE","result","push","type","decodeFixed64","readDoubleLE","BigInt","twoComplements","toString","decodeVarintParts","intVal","decodeStringOrBytes","length","td","TextDecoder","fatal","decode","e","maxLong","longForComplement","greaterThan","subtract"],"sources":["/Users/afganaskarli/PycharmProjects/protobuf/src/protobufPartDecoder.js"],"sourcesContent":["import JSBI from \"jsbi\";\nimport { bufferLeToBeHex, bufferToPrettyHex } from \"./hexUtils\";\nimport { interpretAsSignedType } from \"./varintUtils\";\n\nexport function decodeFixed32(value) {\n  const floatValue = value.readFloatLE(0);\n  const intValue = value.readInt32LE(0);\n  const uintValue = value.readUInt32LE(0);\n\n  const result = [];\n\n  result.push({ type: \"Int\", value: intValue });\n\n  if (intValue !== uintValue) {\n    result.push({ type: \"Unsigned Int\", value: uintValue });\n  }\n\n  result.push({ type: \"Float\", value: floatValue });\n\n  return result;\n}\n\nexport function decodeFixed64(value) {\n  const floatValue = value.readDoubleLE(0);\n  const uintValue = JSBI.BigInt(\"0x\" + bufferLeToBeHex(value));\n  const intValue = twoComplements(uintValue);\n\n  const result = [];\n\n  result.push({ type: \"Int\", value: intValue.toString() });\n\n\n  return result;\n}\n\n\n// this is also related\n\nexport function decodeVarintParts(value) {\n  const result = [];\n  const intVal = JSBI.BigInt(value);\n  result.push({  value: intVal.toString() });\n\n\n  return result;\n}\n\nexport function decodeStringOrBytes(value) {\n  if (!value.length) {\n    return { type: \"string|bytes\", value: \"\" };\n  }\n  const td = new TextDecoder(\"utf-8\", { fatal: true });\n  try {\n    return { type: \"string\", value: td.decode(value) };\n  } catch (e) {\n    return { type: \"bytes\", value: bufferToPrettyHex(value) };\n  }\n}\n\nconst maxLong = JSBI.BigInt(\"0x7fffffffffffffff\");\nconst longForComplement = JSBI.BigInt(\"0x10000000000000000\");\n\nfunction twoComplements(uintValue) {\n  if (JSBI.greaterThan(uintValue, maxLong)) {\n    return JSBI.subtract(uintValue, longForComplement);\n  } else {\n    return uintValue;\n  }\n}\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,YAAY;AAC/D,SAASC,qBAAqB,QAAQ,eAAe;AAErD,OAAO,SAASC,aAAaA,CAACC,KAAK,EAAE;EACnC,MAAMC,UAAU,GAAGD,KAAK,CAACE,WAAW,CAAC,CAAC,CAAC;EACvC,MAAMC,QAAQ,GAAGH,KAAK,CAACI,WAAW,CAAC,CAAC,CAAC;EACrC,MAAMC,SAAS,GAAGL,KAAK,CAACM,YAAY,CAAC,CAAC,CAAC;EAEvC,MAAMC,MAAM,GAAG,EAAE;EAEjBA,MAAM,CAACC,IAAI,CAAC;IAAEC,IAAI,EAAE,KAAK;IAAET,KAAK,EAAEG;EAAS,CAAC,CAAC;EAE7C,IAAIA,QAAQ,KAAKE,SAAS,EAAE;IAC1BE,MAAM,CAACC,IAAI,CAAC;MAAEC,IAAI,EAAE,cAAc;MAAET,KAAK,EAAEK;IAAU,CAAC,CAAC;EACzD;EAEAE,MAAM,CAACC,IAAI,CAAC;IAAEC,IAAI,EAAE,OAAO;IAAET,KAAK,EAAEC;EAAW,CAAC,CAAC;EAEjD,OAAOM,MAAM;AACf;AAEA,OAAO,SAASG,aAAaA,CAACV,KAAK,EAAE;EACnC,MAAMC,UAAU,GAAGD,KAAK,CAACW,YAAY,CAAC,CAAC,CAAC;EACxC,MAAMN,SAAS,GAAGV,IAAI,CAACiB,MAAM,CAAC,IAAI,GAAGhB,eAAe,CAACI,KAAK,CAAC,CAAC;EAC5D,MAAMG,QAAQ,GAAGU,cAAc,CAACR,SAAS,CAAC;EAE1C,MAAME,MAAM,GAAG,EAAE;EAEjBA,MAAM,CAACC,IAAI,CAAC;IAAEC,IAAI,EAAE,KAAK;IAAET,KAAK,EAAEG,QAAQ,CAACW,QAAQ,CAAC;EAAE,CAAC,CAAC;EAGxD,OAAOP,MAAM;AACf;;AAGA;;AAEA,OAAO,SAASQ,iBAAiBA,CAACf,KAAK,EAAE;EACvC,MAAMO,MAAM,GAAG,EAAE;EACjB,MAAMS,MAAM,GAAGrB,IAAI,CAACiB,MAAM,CAACZ,KAAK,CAAC;EACjCO,MAAM,CAACC,IAAI,CAAC;IAAGR,KAAK,EAAEgB,MAAM,CAACF,QAAQ,CAAC;EAAE,CAAC,CAAC;EAG1C,OAAOP,MAAM;AACf;AAEA,OAAO,SAASU,mBAAmBA,CAACjB,KAAK,EAAE;EACzC,IAAI,CAACA,KAAK,CAACkB,MAAM,EAAE;IACjB,OAAO;MAAET,IAAI,EAAE,cAAc;MAAET,KAAK,EAAE;IAAG,CAAC;EAC5C;EACA,MAAMmB,EAAE,GAAG,IAAIC,WAAW,CAAC,OAAO,EAAE;IAAEC,KAAK,EAAE;EAAK,CAAC,CAAC;EACpD,IAAI;IACF,OAAO;MAAEZ,IAAI,EAAE,QAAQ;MAAET,KAAK,EAAEmB,EAAE,CAACG,MAAM,CAACtB,KAAK;IAAE,CAAC;EACpD,CAAC,CAAC,OAAOuB,CAAC,EAAE;IACV,OAAO;MAAEd,IAAI,EAAE,OAAO;MAAET,KAAK,EAAEH,iBAAiB,CAACG,KAAK;IAAE,CAAC;EAC3D;AACF;AAEA,MAAMwB,OAAO,GAAG7B,IAAI,CAACiB,MAAM,CAAC,oBAAoB,CAAC;AACjD,MAAMa,iBAAiB,GAAG9B,IAAI,CAACiB,MAAM,CAAC,qBAAqB,CAAC;AAE5D,SAASC,cAAcA,CAACR,SAAS,EAAE;EACjC,IAAIV,IAAI,CAAC+B,WAAW,CAACrB,SAAS,EAAEmB,OAAO,CAAC,EAAE;IACxC,OAAO7B,IAAI,CAACgC,QAAQ,CAACtB,SAAS,EAAEoB,iBAAiB,CAAC;EACpD,CAAC,MAAM;IACL,OAAOpB,SAAS;EAClB;AACF"},"metadata":{},"sourceType":"module"}